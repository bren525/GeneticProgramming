
import scipy
import random

def fit_func(genr,geny):
	# r represents predator and y represents prey
	# genpr and genpy are lists of all predator and prey genomes
	# will return lists (scorepr and scorepy) of all final scores 

	rscores=[0]*gensize
	yscores=[0]*gensize

	for r in genr:
		for y in geny:
			[elapsedtime,closestpt]=testrun(r,y)
			score=elapsedtime+1000*closestpt
			rscores[genr.index(r)]+=score
			yscores[geny.index(y)]+=score
	
	return(rscores,yscores)


def testrun(r,y):
	mr = 18*(10**-3)
	my = 10*(10**-3)
	Fmaxr = 15*(10**-3)
	Fmaxy = 10*(10**-3)
	c = 1*(10**-3)
	init_params = [50,0,0,0,0,0,0,0]
	
	

	return(elaspedtime,closestpt)


def predpreyDE():


	return(paramchange)

def preyforce():

	return (yforce)


def predforce(r,args**):
	[c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18]=r
	dist=distance(pr,py)
	if dist>70:
		adjust=c1*((vy-vr)-vr/norm(vr)/c2)
		F=Fmax*((py+c3*vy-pr-vr)+adjust)
	elif dist>45:
		adjust=c4*((vy-vr)-vr/norm(vr)/c5)
		F=Fmax*((py+c6*vy-pr-vr)+adjust)
	elif dist>28:
		adjust=c7*((vy-vr)-vr/norm(vr)/c8)
		F=Fmax*((py+c9*vy-pr-vr)+adjust)
	elif dist>13:
		adjust=c10*((vy-vr)-vr/norm(vr)/c11)
		F=Fmax*((py+c12*vy-pr-vr)+adjust)
	elif dist>5:
		adjust=c13*((vy-vr)-vr/norm(vr)/c14)
		F=Fmax*((py+c15*vy-pr-vr)+adjust)
	else:
		adjust=c16*((vy-vr)-vr/norm(vr)/c17)
		F=Fmax*((py+c18*vy-pr-vr)+adjust)
	return (rforce)

def distance():
	return(sqrt())
